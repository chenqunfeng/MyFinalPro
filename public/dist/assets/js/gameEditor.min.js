(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var com, createGame, exchangeEle, previewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

com = require("./pubComponent.coffee");

previewer = require("./pubPreviewerComponent.coffee");

exchangeEle = require("./exchangeEleComponent.coffee");


/*
    createGame运行过程说明
    建立基础框架(render) -> 事件绑定(eventSubscribe,eventBind) -> 
    获取游戏配置信息(getGameConfig) -> 渲染获取到的游戏配置信息:(预览组件:url,游戏资源渲染:config)
 */

createGame = (function(superClass) {
  extend(createGame, superClass);

  function createGame(selector) {
    createGame.__super__.constructor.call(this, selector);
    this.init();
  }

  createGame.prototype.init = function() {
    this.render().eventSubscribe().eventBind().getGameConfig();
    this.userConfig = {};
    this.uploadBtn = document.querySelector("#uploadFile");
    return this;
  };

  createGame.prototype.render = function() {
    var html;
    html = "<input type=\"file\" id=\"uploadFile\" class=\"hide\">\n<div class=\"previewWin\">\n</div>\n<div class=\"gameElement\">\n</div>";
    this.contain.innerHTML = html;
    return this;
  };

  createGame.prototype.getGameConfig = function() {
    $.ajax({
      type: "get",
      url: "/game/getGameConfig",
      dataType: "json",
      success: (function(_this) {
        return function(data) {
          var status;
          status = data.status;
          if ("success" === status) {
            data = data.data;
            return _this.publish("createGame.loaded", data);
          }
        };
      })(this),
      error: (function(_this) {
        return function(err) {
          return console.log(err);
        };
      })(this)
    });
    return this;
  };

  createGame.prototype.createPreviewWin = function() {
    var url;
    this.pre = this.contain.querySelector(".previewWin");
    url = this.data.link;
    this.preview = new previewer(url);
    this.pre.appendChild(this.preview.getPreHtml());
    return this;
  };

  createGame.prototype.createGameElement = function() {
    this.ele = this.contain.querySelector(".gameElement");
    this.listGameElement(this.data.items);
    return this;
  };

  createGame.prototype.listGameElement = function(list) {
    list.map((function(_this) {
      return function(unit, index) {
        var temp;
        temp = new exchangeEle(_this, unit);
        return temp.subscribe("exchangeEle:uploaded", function(publisher, type, name, data) {
          if (data && data.msg && data.msg.url) {
            _this.userConfig[name] = data.msg.url;
            return _this.saveConfig();
          }
        });
      };
    })(this));
    return this;
  };

  createGame.prototype.saveConfig = function(cb) {
    $.ajax({
      type: "post",
      url: "/game/saveConfig",
      data: {
        userConfig: this.userConfig
      },
      dataType: "json",
      success: (function(_this) {
        return function(data) {
          var status;
          status = data.status;
          if ("success" === status) {
            data = data.data;
            return _this.publish("createGame.saveConfig");
          }
        };
      })(this),
      error: (function(_this) {
        return function(err) {
          return console.log(err);
        };
      })(this)
    });
    return this;
  };

  createGame.prototype.eventSubscribe = function() {
    this.subscribe("createGame.loaded", (function(_this) {
      return function(publisher, type, data) {
        _this.data = data;
        return _this.createPreviewWin().createGameElement();
      };
    })(this));
    this.subscribe("createGame.saveConfig", (function(_this) {
      return function() {
        return _this.preview.reload(_this.data.link);
      };
    })(this));
    return this;
  };

  createGame.prototype.eventBind = function() {
    var that;
    that = this;
    this.contain.addEventListener("click", (function(_this) {
      return function(e) {
        var t;
        t = e.target;
        if (_this.hasClass(t, "exChange")) {
          _this.key = t.getAttribute("data-name");
          _this.uploadBtn.setAttribute("data-target", _this.key);
          return _this.uploadBtn.click();
        }
      };
    })(this));
    return this;
  };

  return createGame;

})(com.Components);

module.exports = createGame;


},{"./exchangeEleComponent.coffee":2,"./pubComponent.coffee":4,"./pubPreviewerComponent.coffee":6}],2:[function(require,module,exports){
var ExchangeEle, com, uploadPic,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

com = require("./pubComponent.coffee");

uploadPic = require("./pubUploadComponent.coffee");

ExchangeEle = (function(superClass) {
  extend(ExchangeEle, superClass);

  function ExchangeEle(parent, data) {
    ExchangeEle.__super__.constructor.call(this);
    this.init(parent, data);
  }

  ExchangeEle.prototype.init = function(parent, data) {
    this.parent = parent;
    this.data = data;
    this.upload = new uploadPic("#uploadFile", "/uploadImg", "", this.data.key_name);
    this.upload.setSuccessCb((function(_this) {
      return function(data) {
        var reader, that;
        if (_this.parent.key === _this.data.key_name) {
          that = _this;
          reader = new FileReader();
          reader.onload = (function(thefile) {
            return function(e) {
              return that.setBg(that.gameEleInner, this.result);
            };
          })(data.targetFile);
          reader.readAsDataURL(data.targetFile);
          return _this.publish("exchangeEle:uploaded", _this.data.key_name, data);
        }
      };
    })(this));
    return this.render();
  };

  ExchangeEle.prototype.render = function() {
    var div, h, title, type, value;
    type = this.data.type;
    title = this.data.key_title;
    value = this.data.key_value;
    div = document.createElement("div");
    div.setAttribute("class", "gameEle");
    if ("file" === type) {
      if (value.indexOf("http://") === -1) {
        value = "/" + value;
      }
      h = "<div class=\"pointer gameEleInner " + type + "\"\n    style=\"background-image: url(" + value + ")\">\n</div>";
      h = h + ("<div class=\"gameEleTitle\">\n    " + title + "\n</div>\n<div class=\"exChange transform pointer\" data-name=" + this.data.key_name + "></div>");
      div.innerHTML = h;
      this.parent.ele.appendChild(div);
      this.contain = div;
      return this.setSomeDom();
    }
  };

  ExchangeEle.prototype.setSomeDom = function() {
    this.gameEleInner = this.contain.querySelector(".gameEleInner");
    return this;
  };

  ExchangeEle.prototype.setBg = function(node, value) {
    if (node && value) {
      node.style.backgroundImage = "url(" + value + ")";
    }
    return this;
  };

  return ExchangeEle;

})(com.Components);

module.exports = ExchangeEle;


},{"./pubComponent.coffee":4,"./pubUploadComponent.coffee":8}],3:[function(require,module,exports){
var getFileEnding, isExcel, isPicture, isZIP;

isPicture = function(file) {
  var string;
  string = getFileEnding(file);
  if (string != null) {
    if (".JPG" === string || ".PNG" === string || ".GIF" === string || ".BMP" === string) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

isZIP = function(file) {
  var string;
  string = getFileEnding(file);
  if (string != null) {
    if (".ZIP" === string) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

isExcel = function(file) {
  var string;
  string = getFileEnding(file);
  if (string != null) {
    if (".XLS" === string || ".XLSX" === string) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

getFileEnding = function(file) {
  var fileName, index, nameTemp, tmp;
  if (file != null) {
    fileName = file.name;
    index = fileName.lastIndexOf(".");
    nameTemp = fileName.substr(index);
    tmp = nameTemp.toUpperCase();
    return tmp;
  } else {
    return null;
  }
};

module.exports = {
  isPicture: isPicture,
  isZIP: isZIP,
  isExcel: isExcel
};


},{}],4:[function(require,module,exports){
var Components, Events,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Events = (function() {
  function Events() {
    this.subscription = {};
  }

  Events.prototype.subscribe = function(type, fn, cons) {
    var f, id, p, r;
    if ("undefined" === typeof this.subscription.eventmap) {
      this.subscription.eventmap = {};
    }
    if ("undefined" === typeof this.subscription[type]) {
      this.subscription[type] = [];
    }
    p = this.subscription[type];
    r = false;
    if (p.length > 0) {
      f = fn.toString();
      r = !this.each.call(p, function(item) {
        if (item && f === item.response.toString() && cons && cons === item.caller) {
          return false;
        }
      });
    }
    if (false === r) {
      id = Math.floor(Math.random() * 1000000000000000).toString(36);
      this.subscription.eventmap[id] = type;
      p.push({
        "id": id,
        "response": fn,
        "caller": cons
      });
    }
    return id;
  };

  Events.prototype.publish = function(type) {
    var p, params, publisher;
    p = this.subscription[type];
    if (p && p.length) {
      params = arguments.length > 0 ? Array.prototype.slice.call(arguments) : [];
      publisher = this;
      params.unshift(publisher);
      this.each.call(p, function(item) {
        var cons;
        if (item) {
          cons = item.caller || null;
          return item.response.apply(cons, params);
        }
      });
    }
    return this;
  };

  Events.prototype.unsubscribe = function(id, handle) {
    var map, p, type;
    if ("string" === typeof id) {
      if ("type" === handle) {
        this.subscription[type] && (this.subscription[type].length = 0);
      } else {
        map = this.subscription.eventmap;
        type = map[id];
        if (type) {
          p = this.subscription[type];
          if (p && p.length > 0) {
            this.each.call(p, function(item, index) {
              if (item && id === item.id) {
                p[index] = null;
                map[id] = null;
                delete map[id];
                return false;
              }
            });
          }
        }
      }
    } else {
      this.subscription = {};
    }
    return this;
  };

  Events.prototype.each = function(fn) {
    var i, index, item, key, len, len1, params, result;
    len = this.length;
    params = arguments.length > 1 ? Array.prototype.slice.call(arguments) : [];
    params.length > 1 && params.shift();
    if (len) {
      for (index = i = 0, len1 = this.length; i < len1; index = ++i) {
        item = this[index];
        result = fn.apply(this, [item, index].concat(params));
        if (result === false) {
          return false;
        }
      }
    } else {
      for (key in this) {
        item = this[key];
        if (this.hasOwnProperty(key)) {
          result = fn.apply(this, [item, key].concat(params));
          if (result === false) {
            return false;
          }
        }
      }
    }
    return true;
  };

  return Events;

})();

Components = (function(superClass) {
  extend(Components, superClass);

  function Components(selector) {
    var node;
    Components.__super__.constructor.call(this);
    this.contain = null;
    if ("string" === typeof selector) {
      node = document.querySelector(selector);
    } else if ("object" === typeof selector && selector.nodeType && 1 === selector.nodeType) {
      node = selector;
    }
    if (node && node.getAttribute) {
      this.contain = node;
    }
    this.subscribe("render", this.init, this);
  }

  Components.prototype.render = function(fn) {
    fn.call(this);
    return this.publish("render");
  };

  Components.prototype.init = function() {};

  Components.prototype.contains = function(parent, child) {
    if (parent === child) {
      return 0;
    }
    if (parent.contains) {
      if (parent.contains(child)) {
        return 1;
      }
    } else {
      if (!!(parent.compareDocumentPosition(child) & 16)) {
        return 1;
      }
    }
    return -1;
  };

  Components.prototype.upperStyleName = function(s) {
    return s && s.length && s.replace(/-([a-z])/g, function(a, b) {
      return b.toUpperCase();
    }) || '';
  };

  Components.prototype.lowerStyleName = function(s) {
    return s && s.length && s.replace(/([A-Z])/g, function(a, b) {
      return '-' + b.toLowerCase();
    }) || '';
  };

  Components.prototype.addClass = function(node, className) {
    if (node && node.getAttribute) {
      if (!this.hasClass(node, className)) {
        node.className += " " + className;
      }
    }
    return this;
  };

  Components.prototype.removeClass = function(node, className) {
    var oldClass, reg;
    if (node && node.getAttribute) {
      if (this.hasClass(node, className)) {
        oldClass = node.className;
        reg = new RegExp("(^|\\s)" + className + "(\\s|$)");
        node.className = oldClass.replace(reg, " ").replace(/(^\s+|\s+$)/g, "");
      }
    }
    return this;
  };

  Components.prototype.hasClass = function(node, className) {
    var reg;
    if (node && node.getAttribute) {
      reg = new RegExp("(^|\\s)" + className + "(\\s|$)");
      return node.className && reg.test(node.className);
    }
    return false;
  };

  return Components;

})(Events);

module.exports = {
  Events: Events,
  Components: Components
};


},{}],5:[function(require,module,exports){
var PopUp, com, popUp,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

com = require("./pubComponent.coffee");

popUp = require("./pubPopUpComponent.coffee");

PopUp = (function(superClass) {
  extend(PopUp, superClass);

  function PopUp() {
    PopUp.__super__.constructor.call(this);
    this.init().render().popUpEventBind();
  }

  PopUp.prototype.init = function() {
    return this;
  };

  PopUp.prototype.setContent = function(html) {
    if (html) {
      this.contain.innerHTML = html;
    }
    return this;
  };

  PopUp.prototype.render = function() {
    var html, pop;
    pop = document.createElement("div");
    pop.setAttribute("id", "popUpWin");
    pop.setAttribute("class", "normalTransition realFadeOut");
    html = "<div class=\"popContainer fadeOut normalTransition\">\n    <div class=\"closeBtn\">\n    </div>\n    <div class=\"popContent\">\n    </div>\n</div>";
    pop.innerHTML = html;
    this.greateContain = pop;
    this.secondaryContain = pop.querySelector(".popContainer");
    this.contain = pop.querySelector(".popContent");
    document.querySelector("body").appendChild(pop);
    return this;
  };

  PopUp.prototype.popUpEventBind = function() {
    var close;
    close = this.contain.parentNode.querySelector(".closeBtn");
    return close.addEventListener("click", (function(_this) {
      return function() {
        return _this.close();
      };
    })(this));
  };

  PopUp.prototype.open = function() {
    this.removeClass(this.secondaryContain, "fadeOut");
    this.addClass(this.secondaryContain, "fadeIn");
    this.removeClass(this.greateContain, "realFadeOut");
    this.addClass(this.greateContain, "realFadeIn");
    return this.publish("popUp.open");
  };

  PopUp.prototype.close = function() {
    this.removeClass(this.secondaryContain, "fadeIn");
    this.addClass(this.secondaryContain, "fadeOut");
    this.removeClass(this.greateContain, "realFadeIn");
    this.addClass(this.greateContain, "realFadeOut");
    return this.publish("popUp.close");
  };

  return PopUp;

})(com.Components);

module.exports = PopUp;


},{"./pubComponent.coffee":4,"./pubPopUpComponent.coffee":5}],6:[function(require,module,exports){
var Previewer, com,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

com = require("./pubComponent.coffee");

Previewer = (function(superClass) {
  extend(Previewer, superClass);

  function Previewer(url) {
    Previewer.__super__.constructor.call(this);
    this.init(url);
  }

  Previewer.prototype.init = function(url) {
    this.hasChangedUrl = false;
    this.setUrl(url);
    return this;
  };

  Previewer.prototype.setUrl = function(url) {
    if (url) {
      this.url = url;
      this.hasChangedUrl = true;
    }
    return this;
  };

  Previewer.prototype.preLoad = function() {
    if (this.hasChangedUrl) {
      this.contain.setAttribute("src", this.url);
      this.hasChangedUrl = false;
    }
    return this;
  };

  Previewer.prototype.reload = function(url) {
    this.contain.setAttribute("src", this.url);
    return this;
  };

  Previewer.prototype.getPreHtml = function() {
    var iframe;
    iframe = document.createElement("iframe");
    iframe.setAttribute("class", "previewer");
    this.contain = iframe;
    this.preLoad();
    return iframe;
  };

  return Previewer;

})(com.Components);

module.exports = Previewer;


},{"./pubComponent.coffee":4}],7:[function(require,module,exports){
var ReleaseWin, com, popUp, previewer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

com = require("./pubComponent.coffee");

popUp = require("./pubPopUpComponent.coffee");

previewer = require("./pubPreviewerComponent.coffee");

ReleaseWin = (function(superClass) {
  extend(ReleaseWin, superClass);

  function ReleaseWin(url) {
    ReleaseWin.__super__.constructor.call(this);
    this.init(url);
  }

  ReleaseWin.prototype.init = function(url) {
    this.setUrl(url).render().eventBind().eventSubscribe();
    return this;
  };

  ReleaseWin.prototype.setUrl = function(url) {
    if (url) {
      this.preUrl = url;
    }
    return this;
  };

  ReleaseWin.prototype.render = function() {
    var html;
    this.popUp = new popUp();
    this.previewer = new previewer(this.preUrl);
    html = "<div class='innerRoll'>\n    <div class=\"previewerContainer\"></div>\n    <div class=\"gameInfoContainer\">\n        <div class=\"button editorGame\">\n            发布\n        </div>\n    </div>\n    <div class=\"releaseSuccess\">\n        <div class=\"button gameCenter\">\n            个人中心\n        </div>\n    </div>\n</div>";
    this.popUp.setContent(html);
    this.inner = this.popUp.contain.querySelector(".innerRoll");
    this.previewerContain = this.popUp.contain.querySelector(".previewerContainer");
    this.gameInfoContainer = this.popUp.contain.querySelector(".gameInfoContainer");
    this.releaseSuccess = this.popUp.contain.querySelector(".releaseSuccess");
    this.previewerContain.appendChild(this.previewer.getPreHtml());
    return this;
  };

  ReleaseWin.prototype.eventBind = function() {
    var gameCenter, release;
    release = this.gameInfoContainer.querySelector(".editorGame");
    release.addEventListener("click", (function(_this) {
      return function() {
        return $.ajax({
          type: "post",
          url: "/game/releaseGame",
          data: "",
          dataType: "json",
          success: function(data) {
            var status;
            status = data.status;
            if ("success" === status) {
              return _this.publish("releaseWin.release");
            }
          },
          error: function(err) {
            return console.log(err);
          }
        });
      };
    })(this));
    gameCenter = this.releaseSuccess.querySelector(".gameCenter");
    gameCenter.addEventListener("click", (function(_this) {
      return function() {
        return location.href = "/game/gameCenter";
      };
    })(this));
    return this;
  };

  ReleaseWin.prototype.eventSubscribe = function() {
    this.subscribe("releaseWin.release", (function(_this) {
      return function() {
        console.log(1);
        return _this.switchPage("-900px");
      };
    })(this));
    return this;
  };

  ReleaseWin.prototype.switchPage = function(x) {
    var style;
    style = this.inner.style;
    style.webkitTransition = "-webkit-transform 1s ease";
    style.MozTransition = "-moz-transform 1s ease";
    style.msTransition = "-ms-transform 1s ease";
    style.OTransition = "-o-transform 1s ease";
    style.transition = "transform 1s ease";
    style.webkitTransform = "translateX(" + x + ")";
    style.MozTransform = "translateX(" + x + ")";
    style.msTransform = "translateX(" + x + ")";
    style.OTransform = "translateX(" + x + ")";
    return style.transform = "translateX(" + x + ")";
  };

  ReleaseWin.prototype.open = function() {
    if (this.popUp) {
      this.popUp.open();
      this.previewer.reload();
      this.publish("ReleaseWin.open");
    }
    return this;
  };

  ReleaseWin.prototype.close = function() {
    if (this.popUp) {
      this.popUp.close();
      this.publish("ReleaseWin.close");
    }
    return this;
  };

  return ReleaseWin;

})(com.Components);

module.exports = ReleaseWin;


},{"./pubComponent.coffee":4,"./pubPopUpComponent.coffee":5,"./pubPreviewerComponent.coffee":6}],8:[function(require,module,exports){
var Components, fileValidate, uploadPic,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fileValidate = require("./fileValidate.coffee");

Components = require('./pubComponent.coffee').Components;

uploadPic = (function(superClass) {
  extend(uploadPic, superClass);

  function uploadPic(selector, url, way, key) {
    uploadPic.__super__.constructor.call(this, selector);
    if (typeof selector === 'string') {
      this.input = document.querySelector(selector);
    } else {
      this.input = selector;
    }
    this.url = url;
    this.bindInputChange();
    this.success = null;
    this.error = null;
    this.way = way || "PIC";
    this.key = key || "unique";
  }

  uploadPic.prototype.setSuccessCb = function(successCb) {
    if (successCb && typeof successCb === 'function') {
      return this.success = successCb;
    }
  };

  uploadPic.prototype.setErrorCb = function(errorCb) {
    if (errorCb && typeof errorCb === 'function') {
      return this.error = errorCb;
    }
  };

  uploadPic.prototype.setUrl = function(url) {
    if (url) {
      return this.url = url;
    }
  };

  uploadPic.prototype.setWay = function(way) {
    if (way) {
      return this.way = way;
    }
  };

  uploadPic.prototype.bindInputChange = function() {
    var that;
    this.file = {};
    that = this;
    return this.input.addEventListener('change', (function(_this) {
      return function(evt) {
        var targetFile;
        _this.target = evt.target.getAttribute("data-target");
        if (_this.target === _this.key) {
          _this.file = _this.input.files[0];
          targetFile = evt.target.files[0];
          return _this.upload(_this.url, targetFile, _this.success, _this.error);
        }
      };
    })(this));
  };

  uploadPic.prototype.upload = function(url, targetFile, successCallback, errorCallback) {
    var fileKey, flag, formData, name, uploadProcess;
    flag = true;
    fileKey = "s";
    formData = new FormData();
    formData.append('file', this.file);
    name = this.file.name;
    if ("PIC" === this.way) {
      formData.append('fileKey', (fileKey + Math.random()).replace(/\./g, ""));
    }
    if ("FILE" === this.way) {
      if (!name.match(/\.xlsx$/)) {
        errorCallback("文件格式错误");
        flag = false;
      }
    } else if ("PIC" === this.way) {
      if (!fileValidate.isPicture(this.file)) {
        errorCallback("文件格式错误");
        flag = false;
      }
    }
    if (flag) {
      uploadProcess = $.ajax({
        url: url,
        type: 'POST',
        data: formData,
        dataType: 'json',
        processData: false,
        contentType: false,
        success: function(data) {
          data.targetFile = targetFile;
          return successCallback(data);
        },
        error: errorCallback,
        complete: (function(_this) {
          return function() {
            return _this.publish('uploadStatus:uploadFinished', uploadProcess);
          };
        })(this)
      });
      return this.publish('uploadStatus:uploading', uploadProcess);
    }
  };

  return uploadPic;

})(Components);

module.exports = uploadPic;


},{"./fileValidate.coffee":3,"./pubComponent.coffee":4}],9:[function(require,module,exports){
var create, createGame, release, releaseWin;

createGame = require("./common/createGameComponent.coffee");

releaseWin = require("./common/pubReleaseWinComponent.coffee");

create = {};

release = {};

create = new createGame(".createGameBox");

create.subscribe("createGame.loaded", (function(_this) {
  return function() {
    return release = new releaseWin(create.data.link);
  };
})(this));

$(document).on("click", ".release", function() {
  return release.open();
});


},{"./common/createGameComponent.coffee":1,"./common/pubReleaseWinComponent.coffee":7}]},{},[9])