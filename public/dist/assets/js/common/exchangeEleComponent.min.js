(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var ExchangeEle, com, uploadPic,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

com = require("./pubComponent.coffee");

uploadPic = require("./pubUploadComponent.coffee");

ExchangeEle = (function(superClass) {
  extend(ExchangeEle, superClass);

  function ExchangeEle(parent, data) {
    ExchangeEle.__super__.constructor.call(this);
    this.init(parent, data);
  }

  ExchangeEle.prototype.init = function(parent, data) {
    this.parent = parent;
    this.data = data;
    this.upload = new uploadPic("#uploadFile", "/uploadImg", "", this.data.key_name);
    this.upload.setSuccessCb((function(_this) {
      return function(data) {
        var reader, that;
        if (_this.parent.key === _this.data.key_name) {
          that = _this;
          reader = new FileReader();
          reader.onload = (function(thefile) {
            return function(e) {
              return that.setBg(that.gameEleInner, this.result);
            };
          })(data.targetFile);
          reader.readAsDataURL(data.targetFile);
          return _this.publish("exchangeEle:uploaded", _this.data.key_name, data);
        }
      };
    })(this));
    return this.render();
  };

  ExchangeEle.prototype.render = function() {
    var div, h, title, type, value;
    type = this.data.type;
    title = this.data.key_title;
    value = this.data.key_value;
    div = document.createElement("div");
    div.setAttribute("class", "gameEle");
    if ("file" === type) {
      if (value.indexOf("http://") === -1) {
        value = "/" + value;
      }
      h = "<div class=\"pointer gameEleInner " + type + "\"\n    style=\"background-image: url(" + value + ")\">\n</div>";
      h = h + ("<div class=\"gameEleTitle\">\n    " + title + "\n</div>\n<div class=\"exChange transform pointer\" data-name=" + this.data.key_name + "></div>");
      div.innerHTML = h;
      this.parent.ele.appendChild(div);
      this.contain = div;
      return this.setSomeDom();
    }
  };

  ExchangeEle.prototype.setSomeDom = function() {
    this.gameEleInner = this.contain.querySelector(".gameEleInner");
    return this;
  };

  ExchangeEle.prototype.setBg = function(node, value) {
    if (node && value) {
      node.style.backgroundImage = "url(" + value + ")";
    }
    return this;
  };

  return ExchangeEle;

})(com.Components);

module.exports = ExchangeEle;


},{"./pubComponent.coffee":3,"./pubUploadComponent.coffee":4}],2:[function(require,module,exports){
var getFileEnding, isExcel, isPicture, isZIP;

isPicture = function(file) {
  var string;
  string = getFileEnding(file);
  if (string != null) {
    if (".JPG" === string || ".PNG" === string || ".GIF" === string || ".BMP" === string) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

isZIP = function(file) {
  var string;
  string = getFileEnding(file);
  if (string != null) {
    if (".ZIP" === string) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

isExcel = function(file) {
  var string;
  string = getFileEnding(file);
  if (string != null) {
    if (".XLS" === string || ".XLSX" === string) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};

getFileEnding = function(file) {
  var fileName, index, nameTemp, tmp;
  if (file != null) {
    fileName = file.name;
    index = fileName.lastIndexOf(".");
    nameTemp = fileName.substr(index);
    tmp = nameTemp.toUpperCase();
    return tmp;
  } else {
    return null;
  }
};

module.exports = {
  isPicture: isPicture,
  isZIP: isZIP,
  isExcel: isExcel
};


},{}],3:[function(require,module,exports){
var Components, Events,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Events = (function() {
  function Events() {
    this.subscription = {};
  }

  Events.prototype.subscribe = function(type, fn, cons) {
    var f, id, p, r;
    if ("undefined" === typeof this.subscription.eventmap) {
      this.subscription.eventmap = {};
    }
    if ("undefined" === typeof this.subscription[type]) {
      this.subscription[type] = [];
    }
    p = this.subscription[type];
    r = false;
    if (p.length > 0) {
      f = fn.toString();
      r = !this.each.call(p, function(item) {
        if (item && f === item.response.toString() && cons && cons === item.caller) {
          return false;
        }
      });
    }
    if (false === r) {
      id = Math.floor(Math.random() * 1000000000000000).toString(36);
      this.subscription.eventmap[id] = type;
      p.push({
        "id": id,
        "response": fn,
        "caller": cons
      });
    }
    return id;
  };

  Events.prototype.publish = function(type) {
    var p, params, publisher;
    p = this.subscription[type];
    if (p && p.length) {
      params = arguments.length > 0 ? Array.prototype.slice.call(arguments) : [];
      publisher = this;
      params.unshift(publisher);
      this.each.call(p, function(item) {
        var cons;
        if (item) {
          cons = item.caller || null;
          return item.response.apply(cons, params);
        }
      });
    }
    return this;
  };

  Events.prototype.unsubscribe = function(id, handle) {
    var map, p, type;
    if ("string" === typeof id) {
      if ("type" === handle) {
        this.subscription[type] && (this.subscription[type].length = 0);
      } else {
        map = this.subscription.eventmap;
        type = map[id];
        if (type) {
          p = this.subscription[type];
          if (p && p.length > 0) {
            this.each.call(p, function(item, index) {
              if (item && id === item.id) {
                p[index] = null;
                map[id] = null;
                delete map[id];
                return false;
              }
            });
          }
        }
      }
    } else {
      this.subscription = {};
    }
    return this;
  };

  Events.prototype.each = function(fn) {
    var i, index, item, key, len, len1, params, result;
    len = this.length;
    params = arguments.length > 1 ? Array.prototype.slice.call(arguments) : [];
    params.length > 1 && params.shift();
    if (len) {
      for (index = i = 0, len1 = this.length; i < len1; index = ++i) {
        item = this[index];
        result = fn.apply(this, [item, index].concat(params));
        if (result === false) {
          return false;
        }
      }
    } else {
      for (key in this) {
        item = this[key];
        if (this.hasOwnProperty(key)) {
          result = fn.apply(this, [item, key].concat(params));
          if (result === false) {
            return false;
          }
        }
      }
    }
    return true;
  };

  return Events;

})();

Components = (function(superClass) {
  extend(Components, superClass);

  function Components(selector) {
    var node;
    Components.__super__.constructor.call(this);
    this.contain = null;
    if ("string" === typeof selector) {
      node = document.querySelector(selector);
    } else if ("object" === typeof selector && selector.nodeType && 1 === selector.nodeType) {
      node = selector;
    }
    if (node && node.getAttribute) {
      this.contain = node;
    }
    this.subscribe("render", this.init, this);
  }

  Components.prototype.render = function(fn) {
    fn.call(this);
    return this.publish("render");
  };

  Components.prototype.init = function() {};

  Components.prototype.contains = function(parent, child) {
    if (parent === child) {
      return 0;
    }
    if (parent.contains) {
      if (parent.contains(child)) {
        return 1;
      }
    } else {
      if (!!(parent.compareDocumentPosition(child) & 16)) {
        return 1;
      }
    }
    return -1;
  };

  Components.prototype.upperStyleName = function(s) {
    return s && s.length && s.replace(/-([a-z])/g, function(a, b) {
      return b.toUpperCase();
    }) || '';
  };

  Components.prototype.lowerStyleName = function(s) {
    return s && s.length && s.replace(/([A-Z])/g, function(a, b) {
      return '-' + b.toLowerCase();
    }) || '';
  };

  Components.prototype.addClass = function(node, className) {
    if (node && node.getAttribute) {
      if (!this.hasClass(node, className)) {
        node.className += " " + className;
      }
    }
    return this;
  };

  Components.prototype.removeClass = function(node, className) {
    var oldClass, reg;
    if (node && node.getAttribute) {
      if (this.hasClass(node, className)) {
        oldClass = node.className;
        reg = new RegExp("(^|\\s)" + className + "(\\s|$)");
        node.className = oldClass.replace(reg, " ").replace(/(^\s+|\s+$)/g, "");
      }
    }
    return this;
  };

  Components.prototype.hasClass = function(node, className) {
    var reg;
    if (node && node.getAttribute) {
      reg = new RegExp("(^|\\s)" + className + "(\\s|$)");
      return node.className && reg.test(node.className);
    }
    return false;
  };

  return Components;

})(Events);

module.exports = {
  Events: Events,
  Components: Components
};


},{}],4:[function(require,module,exports){
var Components, fileValidate, uploadPic,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

fileValidate = require("./fileValidate.coffee");

Components = require('./pubComponent.coffee').Components;

uploadPic = (function(superClass) {
  extend(uploadPic, superClass);

  function uploadPic(selector, url, way, key) {
    uploadPic.__super__.constructor.call(this, selector);
    if (typeof selector === 'string') {
      this.input = document.querySelector(selector);
    } else {
      this.input = selector;
    }
    this.url = url;
    this.bindInputChange();
    this.success = null;
    this.error = null;
    this.way = way || "PIC";
    this.key = key || "unique";
  }

  uploadPic.prototype.setSuccessCb = function(successCb) {
    if (successCb && typeof successCb === 'function') {
      return this.success = successCb;
    }
  };

  uploadPic.prototype.setErrorCb = function(errorCb) {
    if (errorCb && typeof errorCb === 'function') {
      return this.error = errorCb;
    }
  };

  uploadPic.prototype.setUrl = function(url) {
    if (url) {
      return this.url = url;
    }
  };

  uploadPic.prototype.setWay = function(way) {
    if (way) {
      return this.way = way;
    }
  };

  uploadPic.prototype.bindInputChange = function() {
    var that;
    this.file = {};
    that = this;
    return this.input.addEventListener('change', (function(_this) {
      return function(evt) {
        var targetFile;
        _this.target = evt.target.getAttribute("data-target");
        if (_this.target === _this.key) {
          _this.file = _this.input.files[0];
          targetFile = evt.target.files[0];
          return _this.upload(_this.url, targetFile, _this.success, _this.error);
        }
      };
    })(this));
  };

  uploadPic.prototype.upload = function(url, targetFile, successCallback, errorCallback) {
    var fileKey, flag, formData, name, uploadProcess;
    flag = true;
    fileKey = "s";
    formData = new FormData();
    formData.append('file', this.file);
    name = this.file.name;
    if ("PIC" === this.way) {
      formData.append('fileKey', (fileKey + Math.random()).replace(/\./g, ""));
    }
    if ("FILE" === this.way) {
      if (!name.match(/\.xlsx$/)) {
        errorCallback("文件格式错误");
        flag = false;
      }
    } else if ("PIC" === this.way) {
      if (!fileValidate.isPicture(this.file)) {
        errorCallback("文件格式错误");
        flag = false;
      }
    }
    if (flag) {
      uploadProcess = $.ajax({
        url: url,
        type: 'POST',
        data: formData,
        dataType: 'json',
        processData: false,
        contentType: false,
        success: function(data) {
          data.targetFile = targetFile;
          return successCallback(data);
        },
        error: errorCallback,
        complete: (function(_this) {
          return function() {
            return _this.publish('uploadStatus:uploadFinished', uploadProcess);
          };
        })(this)
      });
      return this.publish('uploadStatus:uploading', uploadProcess);
    }
  };

  return uploadPic;

})(Components);

module.exports = uploadPic;


},{"./fileValidate.coffee":2,"./pubComponent.coffee":3}]},{},[1])